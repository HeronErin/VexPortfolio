{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nmotor_1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nmotor_2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nmotor_3 = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nmotor_4 = Motor(Ports.PORT4, GearSetting.RATIO_36_1, False)\nmotor_5 = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# -----------------------------------------------------------\n#  _____                _           _            _ _   _         \n# /  __ \\              | |         | |          (_) | | |        \n# | /  \\/_ __ ___  __ _| |_ ___  __| | __      ___| |_| |__      \n# | |   | '__/ _ \\/ _` | __/ _ \\/ _` | \\ \\ /\\ / / | __| '_ \\     \n# | \\__/\\ | |  __/ (_| | ||  __/ (_| |  \\ V  V /| | |_| | | |    \n#  \\____/_|  \\___|\\__,_|\\__\\___|\\__,_|   \\_/\\_/ |_|\\__|_| |_|    \n                                                                                                                 \n#  _   _                   _____                    _             \n# | | | |                 |  ___|                  | |            \n# | |_| |__   ___  __   _ |___ \\   _ __   __ _  ___| | _____ _ __ \n# | __| '_ \\ / _ \\ \\ \\ / /    \\ \\ | '_ \\ / _` |/ __| |/ / _ \\ '__|\n# | |_| | | |  __/  \\ V / /\\__/ / | |_) | (_| | (__|   <  __/ |   \n#  \\__|_| |_|\\___|   \\_/  \\____/  | .__/ \\__,_|\\___|_|\\_\\___|_|   \n#                                 | |                             \n#                                 |_|                 \n# -----------------------------------------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n#!base C:\\Users\\void\\Documents\\vexcode-projects\\example.v5python\n#!out C:\\Users\\void\\Documents\\vexcode-projects\\out.v5python\n\n# !dump partial.py\n# stores func call perams\nclass partial:\n    def __init__(self, func, *args, **kwargs):\n        self.args = args\n        self.kwargs = kwargs\n        self.func = func\n    def __call__(self):\n        self.func(*self.args, **self.kwargs)\n\n\n\n\n\n#!ignoreNextLine\n#from partial import partial\nfrom vex import *\n#!ignoreNextLine\n#controller_1 = Controller(PRIMARY)\n#!ignoreNextLine\n#motor_1 = Motor(Ports.PORT1, 1, False)\n#!ignoreNextLine\n#motor_2 = Motor(Ports.PORT2, 1, False)\n#!ignoreNextLine\n#motor_3 = Motor(Ports.PORT3, 1, False)\n#!ignoreNextLine\n#motor_4 = Motor(Ports.PORT4, 1, False)\n#!ignoreNextLine\n#motor_5 = Motor(Ports.PORT5, 1, False)\n#!ignoreNextLine\n#brain=Brain()\n\n\n\nMenu = [\n    ('Invert direction', False),\n    ('Invert turning', False),\n    ('Turn coefficient', 2)\n  ]\n\n\n# !dump controllerScreen.py\n#!ignoreNextLine\n#controller_1 = Controller(PRIMARY)\n\nclass listView:\n    def __init__(self, data=None) -> None:\n        self.data = [] if data is None else data\n    def set(self, a, b):\n        i=0\n        for c in (self.data):\n            if c[0] == a:\n                self.data[i] = (a,b)\n            i+=1\n    def get(self, a):\n        for c in self.data:\n            if c[0] == a:\n                return c[1]\n\n\nclass Screen:\n    def __init__(self) -> None:\n        self.scrollPos = 0\n        self.baseList = listView(Menu)\n\n    def render(self):\n        controller_1.screen.clear_screen()\n        controller_1.screen.set_cursor(0, 0)\n        controller_1.screen.print(\"-->\")\n        lvi = list(self.baseList.data)\n        for c in range(3):\n            citemI = (self.scrollPos+c)\n            if len(lvi) > citemI:\n                citem = lvi[citemI]\n                controller_1.screen.print(citem[0])\n                controller_1.screen.print(\": \")\n                if type(citem[1]) is not listView and type(citem[1]) is not type(Screen.left):\n                    controller_1.screen.print(str(citem[1]))\n            controller_1.screen.next_row()\n    def changeScroll(self, off):\n        self.scrollPos = max(min(self.scrollPos+off, len(list(self.baseList.data))-1), 0)\n        self.render()\n    def left(self):\n        lvi = list(self.baseList.data)\n        citem = lvi[self.scrollPos]\n        if len(lvi) > self.scrollPos:\n            if type(citem[1]) is int or type(citem[1]) is float:\n                self.baseList.set(citem[0], citem[1]-1)\n            elif type(citem[1]) is bool:\n                self.baseList.set(citem[0], False)\n            elif type(citem[1]) is type(Screen.left):\n                citem[1]()\n        self.render()\n    def right(self):\n        lvi = list(self.baseList.data)\n        citem = lvi[self.scrollPos]\n        if len(lvi) > self.scrollPos:\n            if type(citem[1]) is int or type(citem[1]) is float:\n                self.baseList.set(citem[0], citem[1]+1)\n            elif type(citem[1]) is bool:\n                self.baseList.set(citem[0], True)\n            elif type(citem[1]) is type(Screen.left):\n                citem[1]()\n        self.render()\n        \n\n\n\n\n\n\n\n\n\nscreen = Screen()\nscreen.render()\ncontroller_1.buttonUp.pressed(lambda: screen.changeScroll(-1))\ncontroller_1.buttonDown.pressed(lambda: screen.changeScroll(1))\ncontroller_1.buttonLeft.pressed(lambda: screen.left())\ncontroller_1.buttonRight.pressed(lambda: screen.right())\n\n\n\n\n\ndef con(*args):\n    \n    m1 = controller_1.axis3.position() - (controller_1.axis4.position()/screen.baseList.get(\"Turn coefficient\"))\n    m2 = controller_1.axis3.position() + (controller_1.axis4.position()/screen.baseList.get(\"Turn coefficient\"))\n    if screen.baseList.get(\"Invert direction\"):\n        m1=-m1\n        m2=-m2\n    if screen.baseList.get(\"Invert turning\"):\n        m3 = m1\n        m1=m2\n        m2=m3\n    motor_1.set_velocity(m1                      , PERCENT)\n    motor_2.set_velocity(m2                      , PERCENT)\n    motor_1.spin(FORWARD)\n    motor_2.spin(FORWARD)\n    # print(controller_1.axis4.position())\ntrigRot = 0\ndef spin360():\n    global trigRot\n    trigRot+=360\n    motor_4.spin_to_position(trigRot, DEGREES)\n\n\ncontroller_1.axis3.changed(con)\ncontroller_1.axis4.changed(con)\n\ncontroller_1.buttonR2.pressed(spin360)\n\n\n\n\n\n\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"motor_1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"motor_2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[3],"name":"motor_3","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[4],"name":"motor_4","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[5],"name":"motor_5","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":4,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}